package com.huawei.demo.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.huawei.demo.entity.Department;
import com.huawei.demo.entity.DepartmentExample;
import com.huawei.demo.entity.EmployeeExample;
import com.huawei.demo.entity.mapper.DepartmentMapper;
import com.huawei.demo.entity.mapper.EmployeeMapper;
import com.huawei.demo.service.IDepartmentService;

@Service
public class DepartmentServiceImpl implements IDepartmentService {

	@Autowired
	private DepartmentMapper departmentMapper;
	
	@Autowired
	private EmployeeMapper employeeMapper;
	
	@Override
	public List<Department> listByDepartment() {
		DepartmentExample example = new DepartmentExample();
		example.createCriteria().andStatusEqualTo("01");
		List<Department> byExample = departmentMapper.selectByExample(example );
		if(byExample!=null&&byExample.size()>0) {
			for (Department department : byExample) {
				long empcount = Empcount(department.getDepartmentid());
				department.setCount(Integer.parseInt(String.valueOf(empcount)));
			}
		}
		return byExample;
	}

	@Override
	public Department getByDepartmentInfo(int id) {
		Department department = departmentMapper.selectByPrimaryKey(id);
		if(department!=null) {
			long empcount = Empcount(department.getDepartmentid());
			department.setCount(Integer.parseInt(String.valueOf(empcount)));
		}
		return department;
	}

	@Override
	public void deleteDepartmentById(int id) {
		Department department = new Department();
		department.setStatus("00");
		DepartmentExample example = new DepartmentExample();
		example.createCriteria().andDepartmentidEqualTo(id).andStatusEqualTo("01");
		departmentMapper.updateByExampleSelective(department,example);
	}

	@Override
	public String saveDepartment(Department department) {
		if(department.getDepartmentid()!=null&&department.getDepartmentid()>0){
			departmentMapper.updateByPrimaryKeySelective(department);
			return "updateOk";
		}else{
			departmentMapper.insertSelective(department);
			return "addOk";
		}
	}
	
	@SuppressWarnings("unused")
	private long Empcount(Integer departmentid) {
		EmployeeExample example = new EmployeeExample();
		example.createCriteria().andDepartmentidEqualTo(departmentid).andStatusEqualTo("01");
		long countByExample = employeeMapper.countByExample(example);
		return countByExample;
	}

}
